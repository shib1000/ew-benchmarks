apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: ns-personal-shibmish
data:
  prometheus.yaml: |-
    {
        "apiVersion": 1,
        "datasources": [
            {
               "access":"proxy",
                "editable": true,
                "name": "prometheus",
                "orgId": 1,
                "type": "prometheus",
                "url": "http://prometheus-service.ns-personal-shibmish.svc.cluster.local",
                "version": 1
            }
        ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: ns-personal-shibmish
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - name: grafana
          containerPort: 3000
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources
            readOnly: false
      volumes:
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-datasources
          configMap:
              defaultMode: 420
              name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  labels:
    run: grafana-service
  namespace: ns-personal-shibmish
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana
---
apiVersion: contour.heptio.com/v1beta1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: contour-corp
  name: grafana-ingress
  namespace: ns-personal-shibmish
spec:
  virtualhost:
    fqdn:  shibu-grafana.sandbox.cloud.adobe.io
    tls:
      secretName: heptio-contour/cluster-ssl-alternate
  routes:
    - match: /
      permitInsecure: true
      perFilterConfig:
        envoy.filters.http.header_size:
          header_size:
            max_bytes: 12288
      services:
        - healthCheck:
            healthyThresholdCount: 1
            intervalSeconds: 60
            path: /ping
            timeoutSeconds: 5
            unhealthyThresholdCount: 3
          name: grafana-service
          port: 80
      timeout: 60s
